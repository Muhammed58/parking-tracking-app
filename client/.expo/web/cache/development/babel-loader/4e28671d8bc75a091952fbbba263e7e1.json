{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { useFonts } from 'expo-font';\nimport * as Location from 'expo-location';\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome';\nimport GoBackButton from \"./subScreens/GoBackButton.js\";\nimport { sendLocation } from \"../api.js\";\nimport { ErrorPage } from \"./subScreens/ErrorPage.js\";\nimport SplashScreen from \"./subScreens/SplashScreen.js\";\nimport Rakkas from \"../assets/fonts/fonts.js\";\nimport MapView, { PROVIDER_GOOGLE, Marker } from 'react-native-maps';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function ParkHere(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMsg = _useState4[0],\n      setErrorMsg = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, status, location;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status !== 'granted')) {\n                _context.next = 7;\n                break;\n              }\n\n              setErrorMsg('Permission to access location was denied');\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({\n                maximumAge: 60000,\n                accuracy: Platform.OS === \"android\" ? Location.Accuracy.High : Location.Accuracy.Lowest\n              }));\n\n            case 9:\n              location = _context.sent;\n              setLocation(location.coords);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isParked = _useState6[0],\n      setIsParked = _useState6[1];\n\n  var handlePostLocation = function handlePostLocation() {\n    return _regeneratorRuntime.async(function handlePostLocation$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            sendLocation(location.latitude, location.longitude).then(function () {\n              setIsParked(true);\n              setTimeout(function () {\n                return navigation.navigate('MainPage', {\n                  latitude: location.latitude,\n                  longitude: location.longitude\n                });\n              }, 1000);\n            }).catch(function (err) {\n              return console.log(err);\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      errorMessage = _useState8[0],\n      setErrorMessage = _useState8[1];\n\n  var _useFonts = useFonts({\n    Rakkas: Rakkas\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      loaded = _useFonts2[0];\n\n  if (!loaded) {\n    _jsx(SplashScreen, {});\n  }\n\n  return _jsx(_Fragment, {\n    children: !location ? _jsx(SplashScreen, {}) : _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(MapView, {\n        style: styles.map,\n        provider: PROVIDER_GOOGLE,\n        initialRegion: {\n          latitude: location.latitude,\n          longitude: location.longitude,\n          latitudeDelta: 0.0922,\n          longitudeDelta: 0.0421\n        },\n        children: _jsx(Marker, {\n          coordinate: {\n            latitude: location.latitude,\n            longitude: location.longitude\n          },\n          onDragEnd: function onDragEnd(e) {\n            return setLocation(e.nativeEvent.coordinate);\n          },\n          draggable: true\n        })\n      }), isParked ? _jsxs(View, {\n        style: {\n          position: \"absolute\",\n          width: width * 0.65,\n          height: height * 0.13,\n          backgroundColor: \"#8BDB81\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          borderRadius: 30,\n          shadowColor: \"black\",\n          shadowRadius: 2,\n          shadowOpacity: 0.9,\n          shadowOffset: {\n            width: 0,\n            height: 3\n          }\n        },\n        children: [_jsx(Text, {\n          style: {\n            fontFamily: \"Rakkas\",\n            fontSize: width * 0.06\n          },\n          children: \"Succesfully Parked!\"\n        }), _jsx(FontAwesomeIcon, {\n          icon: faCheckCircle,\n          size: width * 0.1\n        })]\n      }) : _jsxs(View, {\n        style: styles.buttonContainer,\n        children: [_jsx(Pressable, {\n          style: function style(_ref2) {\n            var pressed = _ref2.pressed;\n            return [{\n              shadowColor: \"black\",\n              shadowRadius: 2,\n              shadowOpacity: pressed ? 0.1 : 0.9,\n              shadowOffset: pressed ? {\n                width: 0,\n                height: 1\n              } : {\n                width: 0,\n                height: 3\n              },\n              transform: [pressed ? {\n                translateY: 10\n              } : {\n                translateY: 0\n              }]\n            }, styles.parkHereButton];\n          },\n          onPress: handlePostLocation,\n          children: _jsx(Text, {\n            style: styles.parkHereButtonText,\n            children: \"Park Here\"\n          })\n        }), _jsx(View, {\n          style: styles.chooseLocationButton,\n          children: _jsx(Text, {\n            style: styles.chooseLocationButtonText,\n            children: \"Hold the pin and drag to select different location\"\n          })\n        })]\n      }), errorMessage && _jsx(ErrorPage, {\n        errorMessage: \"error Message\"\n      }), _jsx(GoBackButton, {})]\n    })\n  });\n}\nvar width = Dimensions.get('window').width;\nvar height = Dimensions.get('window').height;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: \"relative\"\n  },\n  map: {\n    width: width,\n    height: height,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  buttonContainer: {\n    position: \"absolute\",\n    top: height * 0.7,\n    width: width * 0.6,\n    height: height * 0.17,\n    alignItems: \"center\"\n  },\n  parkHereButton: {\n    position: \"absolute\",\n    top: height * 0.01,\n    width: width * 0.6,\n    height: height * 0.06,\n    borderRadius: 30,\n    backgroundColor: \"#FFCC56\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  parkHereButtonText: {\n    position: \"absolute\",\n    fontFamily: \"Rakkas\",\n    fontSize: width * 0.07\n  },\n  chooseLocationButton: {\n    position: \"absolute\",\n    top: height * 0.1,\n    width: width * 0.6,\n    height: height * 0.08,\n    borderRadius: 10,\n    paddingLeft: width * 0.01,\n    paddingRight: width * 0.01,\n    backgroundColor: \"#FFCC56\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    shadowColor: \"black\",\n    shadowRadius: 2,\n    shadowOpacity: 0.9,\n    shadowOffset: {\n      width: 0,\n      height: 3\n    }\n  },\n  chooseLocationButtonText: {\n    position: \"absolute\",\n    fontFamily: \"Rakkas\",\n    fontSize: width * 0.05,\n    textAlign: \"center\"\n  }\n});","map":{"version":3,"sources":["/Users/muhammetarslantas/Desktop/Muhammet/Projects/ParkingApp/client/screens/ParkHere.js"],"names":["React","useState","useEffect","useFonts","Location","faCheckCircle","FontAwesomeIcon","GoBackButton","sendLocation","ErrorPage","SplashScreen","Rakkas","MapView","PROVIDER_GOOGLE","Marker","ParkHere","navigation","location","setLocation","errorMsg","setErrorMsg","requestForegroundPermissionsAsync","status","getCurrentPositionAsync","maximumAge","accuracy","Platform","OS","Accuracy","High","Lowest","coords","isParked","setIsParked","handlePostLocation","latitude","longitude","then","setTimeout","navigate","catch","err","console","log","errorMessage","setErrorMessage","loaded","styles","container","map","latitudeDelta","longitudeDelta","e","nativeEvent","coordinate","position","width","height","backgroundColor","justifyContent","alignItems","borderRadius","shadowColor","shadowRadius","shadowOpacity","shadowOffset","fontFamily","fontSize","buttonContainer","pressed","transform","translateY","parkHereButton","parkHereButtonText","chooseLocationButton","chooseLocationButtonText","Dimensions","get","StyleSheet","create","flex","top","paddingLeft","paddingRight","textAlign"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { useFonts } from 'expo-font'\nimport * as Location from 'expo-location';\nimport {  faCheckCircle } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome'\nimport GoBackButton from './subScreens/GoBackButton.js'\nimport { sendLocation } from '../api.js'\nimport { ErrorPage } from './subScreens/ErrorPage.js';\nimport SplashScreen from './subScreens/SplashScreen.js'\nimport Rakkas from '../assets/fonts/fonts.js'\n\nimport MapView, {PROVIDER_GOOGLE, Marker} from 'react-native-maps';\nimport {View, Text, StyleSheet, \n        Dimensions, Pressable,\n        Platform\n    \n    } from 'react-native'\n\nexport default function ParkHere({navigation}){\n     \n\n    //Handle with location\n    const [location, setLocation] = useState(null);\n    const [errorMsg, setErrorMsg] = useState(null);\n  \n    useEffect(() => {\n      (async () => {\n        let { status } = await Location.requestForegroundPermissionsAsync();\n        if (status !== 'granted') {\n          setErrorMsg('Permission to access location was denied');\n          return;\n        }\n        let location = await Location.getCurrentPositionAsync({\n            maximumAge: 60000, // only for Android\n            accuracy: Platform.OS === \"android\" ? Location.Accuracy.High : Location.Accuracy.Lowest,\n        });\n        setLocation(location.coords);\n    })();\n}, []);\n\n/* If parked succesfully */\n    const [isParked, setIsParked] = useState(false)\n\n/* Handle Post Location Info with User ID  */\n    const handlePostLocation = async() =>{\n        sendLocation(location.latitude, location.longitude)\n        .then(() => {\n            setIsParked(true)\n            setTimeout(() => navigation.navigate('MainPage',{\n                latitude: location.latitude,\n                longitude: location.longitude\n            }), 1000);\n        })\n        .catch(err=> console.log(err))\n    }\n\n\n    //HANDLE ERROR MESSAGES\n    const [errorMessage, setErrorMessage] = useState(false)\n\n\n    //Fonts define\n    let [loaded] = useFonts({\n        Rakkas: Rakkas\n    })\n\n     if(!loaded){\n         <SplashScreen/>\n     }\n    return (\n        <>\n        {!location ? ( \n            <SplashScreen/>\n            ) : (\n                <View style={styles.container}>\n            <MapView style={styles.map}\n                provider={PROVIDER_GOOGLE}\n                initialRegion={{\n                    latitude: location.latitude,\n                    longitude: location.longitude,\n                    latitudeDelta: 0.0922,\n                    longitudeDelta: 0.0421,\n                }}>\n\n                <Marker\n                    coordinate={{latitude:location.latitude, longitude:location.longitude}}\n                    onDragEnd={e=> setLocation(e.nativeEvent.coordinate)}\n                    draggable\n                    />\n                \n            </MapView>\n\n      \n\n        { isParked ?(\n            \n            <View style={{\n                position:\"absolute\",\n                width: width * 0.65,\n                height: height * 0.13,\n                backgroundColor:\"#8BDB81\",\n                justifyContent:\"center\",\n                alignItems:\"center\",\n                borderRadius:30,\n                shadowColor:\"black\", \n                shadowRadius:2,\n                shadowOpacity: 0.9,\n                shadowOffset:{width:0, height:3},\n            }}>\n                <Text style={{\n                    fontFamily:\"Rakkas\",\n                    fontSize: width * 0.06,\n                }}>Succesfully Parked!\n                </Text>\n                <FontAwesomeIcon icon={faCheckCircle} size={width * 0.1}/>\n            </View>\n        ) : (\n            <View style={styles.buttonContainer}>\n             <Pressable style={\n                 ({pressed}) =>[\n                     { shadowColor:\"black\", \n                     shadowRadius:2,\n                     shadowOpacity: pressed? 0.1: 0.9,\n                     shadowOffset: pressed ? {width:0, height:1} : {width:0, height:3},\n                     transform:[pressed ? {translateY: 10}:{ translateY:0}]\n                    },\n                    styles.parkHereButton]}\n                    onPress={handlePostLocation}\n                    >\n                       \n                   <Text style={styles.parkHereButtonText}>Park Here</Text>\n               </Pressable>\n\n                <View style={styles.chooseLocationButton}>\n                   <Text style={styles.chooseLocationButtonText}>Hold the pin and drag to select different location</Text>\n               </View>\n            </View>\n        )}\n            { errorMessage && <ErrorPage errorMessage={\"error Message\"}/> }\n       \n            <GoBackButton/>\n        </View>\n    )}\n    </>\n    )\n}\n\n//Get screen height and width for responsive\nconst width = Dimensions.get('window').width;\nconst height = Dimensions.get('window').height;\n\nconst styles = StyleSheet.create({\n    container:{\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n        position:\"relative\"\n    },\n    map:{\n        width: width,\n        height: height,\n        justifyContent:\"center\",\n        alignItems:\"center\",\n    },\n\n    buttonContainer:{\n        position:\"absolute\",\n        top: height * 0.7,\n        width: width * 0.6,\n        height: height * 0.17,\n        alignItems:\"center\",\n    },\n    parkHereButton:{\n        position:\"absolute\",\n        top: height * 0.01,\n        width: width * 0.6,\n        height: height *0.06,\n        borderRadius:30,\n        backgroundColor:\"#FFCC56\",\n        justifyContent:\"center\",\n        alignItems:\"center\",\n    },\n    \n    parkHereButtonText:{\n        position:\"absolute\",\n        fontFamily:\"Rakkas\",\n        fontSize: width * 0.07,\n    },\n    \n    chooseLocationButton:{\n        position:\"absolute\",\n        top: height * 0.1,\n        width: width * 0.6,\n        height: height *0.08,\n        borderRadius:10,\n        paddingLeft:width *0.01,\n        paddingRight: width * 0.01,\n        backgroundColor:\"#FFCC56\",\n        justifyContent:\"center\",\n        alignItems:\"center\",\n        shadowColor:\"black\", \n        shadowRadius:2,\n        shadowOpacity:0.9,\n        shadowOffset: {width:0, height:3},\n    },\n\n    chooseLocationButtonText:{\n        position:\"absolute\",\n        fontFamily:\"Rakkas\",\n        fontSize: width * 0.05,\n        textAlign:\"center\",\n    },\n\n\n})"]},"metadata":{},"sourceType":"module"}