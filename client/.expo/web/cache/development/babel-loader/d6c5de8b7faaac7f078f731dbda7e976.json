{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport { useTimeout } from \"./useTimer\";\nexport var DEFAULT_BLINKING_SPEED = 500;\nexport function MaskSymbol(_ref) {\n  var isLastFilledCell = _ref.isLastFilledCell,\n      symbol = _ref.children,\n      maskSymbol = _ref.maskSymbol,\n      _ref$delay = _ref.delay,\n      delay = _ref$delay === void 0 ? DEFAULT_BLINKING_SPEED : _ref$delay;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      visibleFlag = _useState2[0],\n      setFlag = _useState2[1];\n\n  useTimeout(function () {\n    return setFlag(false);\n  }, delay);\n  useEffect(function () {\n    if (isLastFilledCell) {\n      setFlag(false);\n    }\n  }, [isLastFilledCell]);\n  return visibleFlag ? symbol : maskSymbol;\n}","map":{"version":3,"sources":["/Users/muhammetarslantas/Desktop/Muhammet/Projects/ParkingApp/client/node_modules/react-native-confirmation-code-field/esm/MaskSymbol.js"],"names":["useEffect","useState","useTimeout","DEFAULT_BLINKING_SPEED","MaskSymbol","isLastFilledCell","symbol","children","maskSymbol","delay","visibleFlag","setFlag"],"mappings":";AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,SAAQC,UAAR;AACA,OAAO,IAAMC,sBAAsB,GAAG,GAA/B;AACP,OAAO,SAASC,UAAT,OAKJ;AAAA,MAJDC,gBAIC,QAJDA,gBAIC;AAAA,MAHSC,MAGT,QAHDC,QAGC;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,wBADDC,KACC;AAAA,MADDA,KACC,2BADON,sBACP;;AACD,kBAA+BF,QAAQ,CAAC,IAAD,CAAvC;AAAA;AAAA,MAAOS,WAAP;AAAA,MAAoBC,OAApB;;AACAT,EAAAA,UAAU,CAAC;AAAA,WAAMS,OAAO,CAAC,KAAD,CAAb;AAAA,GAAD,EAAuBF,KAAvB,CAAV;AACAT,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIK,gBAAJ,EAAsB;AACpBM,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,GAJQ,EAIN,CAACN,gBAAD,CAJM,CAAT;AAMA,SAAOK,WAAW,GAAGJ,MAAH,GAAYE,UAA9B;AACD","sourcesContent":["import {useEffect, useState} from 'react';\nimport {useTimeout} from './useTimer';\nexport const DEFAULT_BLINKING_SPEED = 500;\nexport function MaskSymbol({\n  isLastFilledCell,\n  children: symbol,\n  maskSymbol,\n  delay = DEFAULT_BLINKING_SPEED,\n}) {\n  const [visibleFlag, setFlag] = useState(true);\n  useTimeout(() => setFlag(false), delay);\n  useEffect(() => {\n    if (isLastFilledCell) {\n      setFlag(false);\n    }\n  }, [isLastFilledCell]);\n  // @ts-expect-error `JSX.Element` is not a `ReactNode`\n  return visibleFlag ? symbol : maskSymbol;\n}\n"]},"metadata":{},"sourceType":"module"}