{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nvar _excluded = [\"provider\"];\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport queryString from 'query-string';\nexport var geoCordStringify = function geoCordStringify(latitude, longitude) {\n  [latitude, longitude].map(function (coord) {\n    if (typeof coord !== 'number') {\n      throw new Error('Entered a non-number value for geo coordinates.');\n    }\n  });\n  return latitude + \",\" + longitude;\n};\nexport var validateEnum = function validateEnum() {\n  var enums = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return function (type) {\n    if (enums.indexOf(type) === -1) {\n      throw new Error(\"Received \" + type + \", expected \" + enums);\n    }\n\n    return true;\n  };\n};\nexport var validateTravelType = validateEnum(['drive', 'walk', 'public_transport']);\nexport var validateMapType = validateEnum(['standard', 'satellite', 'hybrid', 'transit']);\n\nvar cleanObject = function cleanObject(input) {\n  return Object.keys(input).reduce(function (acc, key) {\n    var currentValue = input[key];\n    return currentValue ? _extends({}, acc, _defineProperty({}, key, currentValue)) : acc;\n  }, {});\n};\n\nexport var createAppleParams = function createAppleParams(options) {\n  var travelTypeMap = {\n    drive: 'd',\n    walk: 'w',\n    public_transport: 'r'\n  };\n  var baseTypeMap = {\n    satellite: 'k',\n    standard: 'm',\n    hybrid: 'h',\n    transit: 'r'\n  };\n  var params = {\n    ll: options.coords,\n    z: options.zoom,\n    dirflg: options.travelType ? travelTypeMap[options.travelType] : null,\n    q: options.query,\n    saddr: options.start,\n    daddr: options.end,\n    t: options.mapType ? baseTypeMap[options.mapType] : null\n  };\n\n  if (options.query && options.coords && options.zoom === undefined) {\n    params.z = 15;\n  }\n\n  return cleanObject(params);\n};\nexport var createGoogleParams = function createGoogleParams(options) {\n  var travelTypeMap = {\n    drive: 'driving',\n    walk: 'walking',\n    public_transport: 'transit'\n  };\n  var baseTypeMap = {\n    satellite: 'satellite',\n    standard: 'roadmap',\n    hybrid: 'satellite',\n    transit: 'roadmap'\n  };\n  var params = {\n    origin: options.start,\n    destination: options.end,\n    destination_place_id: options.endPlaceId,\n    travelmode: travelTypeMap[options.travelType],\n    zoom: options.zoom,\n    basemap: baseTypeMap[options.mapType]\n  };\n\n  if (options.mapType === 'transit' || options.mapType === 'hybrid') {\n    params.layer = 'transit';\n  }\n\n  if (options.navigate === true) {\n    params.dir_action = 'navigate';\n  }\n\n  if (options.coords) {\n    params.center = options.coords;\n  } else {\n    params.query = options.query;\n    params.query_place_id = options.queryPlaceId;\n  }\n\n  return cleanObject(params);\n};\nexport var createYandexParams = function createYandexParams(options) {\n  var travelTypeMap = {\n    drive: 'auto',\n    walk: 'pd',\n    public_transport: 'mt'\n  };\n  var baseTypeMap = {\n    standard: 'map',\n    satellite: 'satellite',\n    hybrid: 'skl',\n    transit: 'map'\n  };\n  var params = {\n    z: options.zoom,\n    rtt: travelTypeMap[options.travelType],\n    ll: options.reverseCoords,\n    pt: options.reverseCoords,\n    oid: options.queryPlaceId,\n    text: options.query,\n    l: options.mapType ? baseTypeMap[options.mapType] : null\n  };\n\n  if (options.start && options.end) {\n    params.rtext = options.start + \"~\" + options.end;\n  }\n\n  if (options.start && !options.end) {\n    console.warn('Yandex Maps does not support current location, please specify direction\\'s start and end.');\n    params.rtext = \"\" + options.start;\n  }\n\n  if (options.end && !options.start) {\n    console.warn('Yandex Maps does not support current location, please specify direction\\'s start and end.');\n    params.rtext = \"\" + options.end;\n  }\n\n  return cleanObject(params);\n};\nexport var createQueryParameters = function createQueryParameters(options) {\n  if (options.travelType) {\n    validateTravelType(options.travelType);\n  }\n\n  if (options.mapType) {\n    validateMapType(options.mapType);\n  }\n\n  if (options.latitude && options.longitude) {\n    options.coords = geoCordStringify(options.latitude, options.longitude);\n    options.reverseCoords = geoCordStringify(options.longitude, options.latitude);\n  }\n\n  var generateParameters = {\n    apple: createAppleParams,\n    google: createGoogleParams,\n    yandex: createYandexParams\n  }[options.provider];\n  return generateParameters(options);\n};\nexport default function open(options) {\n  createOpenLink(options)();\n}\nexport function createOpenLink(_ref) {\n  var provider = _ref.provider,\n      options = _objectWithoutProperties(_ref, _excluded);\n\n  var defaultProvider = Platform.OS === 'ios' ? 'apple' : 'google';\n  var mapProvider = provider || defaultProvider;\n  var mapLink = createMapLink(_objectSpread({\n    provider: mapProvider\n  }, options));\n  return function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", Linking.openURL(mapLink).catch(function (err) {\n              return console.error('An error occurred', err);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n}\nexport function createMapLink(options) {\n  var _options$provider = options.provider,\n      provider = _options$provider === void 0 ? 'google' : _options$provider,\n      latitude = options.latitude,\n      longitude = options.longitude,\n      zoom = options.zoom,\n      start = options.start,\n      end = options.end,\n      endPlaceId = options.endPlaceId,\n      query = options.query,\n      queryPlaceId = options.queryPlaceId,\n      navigate = options.navigate,\n      travelType = options.travelType,\n      mapType = options.mapType;\n  var link = {\n    google: 'https://www.google.com/maps/search/?api=1&',\n    apple: Platform.OS === 'ios' ? 'maps://?' : 'http://maps.apple.com/?',\n    yandex: 'https://maps.yandex.com/?'\n  };\n\n  if (latitude && longitude) {\n    link.google = 'https://www.google.com/maps/@?api=1&map_action=map&';\n\n    if (navigate === true) {\n      console.warn(\"Expected 'end' parameter in navigation, defaulting to preview mode.\");\n      options.navigate = false;\n    }\n  }\n\n  if (options.end) {\n    link.google = 'https://www.google.com/maps/dir/?api=1&';\n  }\n\n  var mapQueryParams = createQueryParameters(_objectSpread(_objectSpread({}, options), {}, {\n    provider: provider\n  }));\n  return link[provider] + queryString.stringify(mapQueryParams).replace(/%2C/g, ',');\n}","map":{"version":3,"sources":["/Users/muhammetarslantas/Desktop/Muhammet/Projects/ParkingApp/client/node_modules/react-native-open-maps/index.js"],"names":["queryString","geoCordStringify","latitude","longitude","map","coord","Error","validateEnum","enums","type","indexOf","validateTravelType","validateMapType","cleanObject","input","Object","keys","reduce","acc","key","currentValue","createAppleParams","options","travelTypeMap","drive","walk","public_transport","baseTypeMap","satellite","standard","hybrid","transit","params","ll","coords","z","zoom","dirflg","travelType","q","query","saddr","start","daddr","end","t","mapType","undefined","createGoogleParams","origin","destination","destination_place_id","endPlaceId","travelmode","basemap","layer","navigate","dir_action","center","query_place_id","queryPlaceId","createYandexParams","rtt","reverseCoords","pt","oid","text","l","rtext","console","warn","createQueryParameters","generateParameters","apple","google","yandex","provider","open","createOpenLink","defaultProvider","Platform","OS","mapProvider","mapLink","createMapLink","Linking","openURL","catch","err","error","link","mapQueryParams","stringify","replace"],"mappings":"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","sourcesContent":["import { Linking, Platform } from 'react-native';\nimport queryString from 'query-string';\n\n// Stringifies the latitude and longitude into coordinates\nexport const geoCordStringify = (latitude, longitude) => {\n\t[latitude, longitude].map(coord => {\n\t\tif (typeof coord !== 'number') {\n\t\t\tthrow new Error('Entered a non-number value for geo coordinates.');\n\t\t}\n\t});\n\n\treturn `${latitude},${longitude}`;\n}\n\n// Creates a validator for an array\nexport const validateEnum = (enums = []) => (type) => {\n\tif (enums.indexOf(type) === -1) {\n\t\tthrow new Error(`Received ${type}, expected ${enums}`);\n\t}\n\treturn true;\n}\n\nexport const validateTravelType = validateEnum(['drive', 'walk', 'public_transport']);\nexport const validateMapType = validateEnum(['standard', 'satellite', 'hybrid', 'transit']);\n\n// cleanObject :: {} -> {}\n// Creates a new object that removes any empty values\nconst cleanObject = input => {\n\treturn Object.keys(input).reduce((acc, key) => {\n\t\tconst currentValue = input[key];\n\t\treturn (currentValue) ?\n\t\t\tObject.assign({}, acc, { [key]: currentValue }) : acc;\n\t}, {});\n}\n\n// Create Apple Maps Parameters\n// doc: https://developer.apple.com/library/archive/featuredarticles/iPhoneURLScheme_Reference/MapLinks/MapLinks.html\nexport const createAppleParams = options => {\n\tconst travelTypeMap = {\n\t\tdrive: 'd',\n\t\twalk: 'w',\n\t\tpublic_transport: 'r'\n\t};\n\n\tconst baseTypeMap = {\n\t\tsatellite: 'k',\n\t\tstandard: 'm',\n\t\thybrid: 'h',\n\t\ttransit: 'r',\n\t}\n\n\tconst params = {\n\t\tll: options.coords,\n\t\tz: options.zoom,\n\t\tdirflg: (options.travelType) ? travelTypeMap[options.travelType] : null,\n\t\tq: options.query,\n\t\tsaddr: options.start,\n\t\tdaddr: options.end,\n\t\tt: (options.mapType) ? baseTypeMap[options.mapType] : null\n\t}\n\n\t// User performing a query near a location, this requires the z parameter for apple maps\n\tif (options.query && options.coords && options.zoom === undefined) {\n\t\tparams.z = 15;\n\t}\n\n\treturn cleanObject(params);\n}\n\n// Create Google Maps Parameters\n// doc: https://developers.google.com/maps/documentation/urls/get-started\nexport const createGoogleParams = options => {\n\tconst travelTypeMap = {\n\t\tdrive: 'driving',\n\t\twalk: 'walking',\n\t\tpublic_transport: 'transit'\n\t};\n\n\tconst baseTypeMap = {\n\t\tsatellite: 'satellite',\n\t\tstandard: 'roadmap',\n\t\thybrid: 'satellite',\n\t\ttransit: 'roadmap'\n\t}\n\n\tconst params = {\n\t\torigin: options.start,\n\t\tdestination: options.end,\n\t\tdestination_place_id: options.endPlaceId,\n\t\ttravelmode: travelTypeMap[options.travelType],\n\t\tzoom: options.zoom,\n\t\tbasemap: baseTypeMap[options.mapType],\n\t};\n\n\tif (options.mapType === 'transit' || options.mapType === 'hybrid') {\n\t\tparams.layer = 'transit';\n\t}\n\n\tif (options.navigate === true) {\n\t\tparams.dir_action = 'navigate';\n\t}\n\n\tif (options.coords) {\n\t\tparams.center = options.coords;\n\t} else {\n\t\tparams.query = options.query;\n\t\tparams.query_place_id = options.queryPlaceId;\n\t}\n\n\treturn cleanObject(params);\n}\n\n// Create Yandex Maps Parameters\nexport const createYandexParams = options => {\n\tconst travelTypeMap = {\n\t  \tdrive: 'auto',\n\t  \twalk: 'pd',\n\t  \tpublic_transport: 'mt'\n\t};\n\n\tconst baseTypeMap = {\n\t\tstandard: 'map',\n\t\tsatellite: 'satellite',\n\t\thybrid: 'skl',\n\t\ttransit: 'map' // Yandex does not have a transit map per docs, setting to default\n\t}\n\n\tconst params = {\n\t  \tz: options.zoom,\n\t  \trtt: travelTypeMap[options.travelType],\n\t  \t// yandex url scheme requires reversed coords\n\t  \tll: options.reverseCoords,\n\t  \tpt: options.reverseCoords,\n\t  \toid: options.queryPlaceId,\n\t  \ttext: options.query,\n\t\tl: (options.mapType) ? baseTypeMap[options.mapType] : null\n\t};\n\n\tif (options.start && options.end) {\n\t  \tparams.rtext = `${options.start}~${options.end}`;\n\t}\n\n\tif (options.start && !options.end) {\n\t  \tconsole.warn('Yandex Maps does not support current location, please specify direction\\'s start and end.');\n\t  \tparams.rtext = `${options.start}`;\n\t}\n\n\tif (options.end && !options.start) {\n  \t  \tconsole.warn('Yandex Maps does not support current location, please specify direction\\'s start and end.');\n\t  \tparams.rtext = `${options.end}`;\n\t}\n\n\treturn cleanObject(params);\n  };\n\n// Generates a query parameter for the provider specified\nexport const createQueryParameters = (options) => {\n\tif (options.travelType) {\n\t\tvalidateTravelType(options.travelType);\n\t}\n\n\tif (options.mapType) {\n\t\tvalidateMapType(options.mapType);\n\t}\n\n\tif (options.latitude && options.longitude) {\n\t\toptions.coords = geoCordStringify(options.latitude, options.longitude);\n\t\toptions.reverseCoords = geoCordStringify(options.longitude, options.latitude);\n\t}\n\n\tconst generateParameters = {\n\t\tapple: createAppleParams,\n\t\tgoogle: createGoogleParams,\n\t\tyandex: createYandexParams,\n\t}[options.provider];\n\n\treturn generateParameters(options);\n};\n\nexport default function open(options) {\n\tcreateOpenLink(options)();\n}\n\n// Returns a delayed async function that opens when executed\nexport function createOpenLink({ provider, ...options }) {\n\tconst defaultProvider = (Platform.OS === 'ios') ? 'apple' : 'google';\n\tconst mapProvider = provider || defaultProvider;\n\n\t// Allow override provider, otherwise use the default provider\n\tconst mapLink = createMapLink({ provider: mapProvider, ...options });\n\treturn async () => Linking.openURL(mapLink).catch(err => console.error('An error occurred', err));\n}\n\nexport function createMapLink(options) {\n\t// All Options Defined Here\n\tconst {\n\t\tprovider = 'google',\n\t\tlatitude,\n\t\tlongitude,\n\t\tzoom,\n\t\tstart,\n\t\tend,\n\t\tendPlaceId,\n\t\tquery,\n\t\tqueryPlaceId,\n\t\tnavigate,\n\t\ttravelType,\n\t\tmapType\n\t} = options;\n\n\t// Assume query is first choice\n\tconst link = {\n\t\tgoogle: 'https://www.google.com/maps/search/?api=1&',\n\t\tapple: (Platform.OS === 'ios') ? 'maps://?' : 'http://maps.apple.com/?',\n\t\tyandex: 'https://maps.yandex.com/?'\n\t};\n\n\t// Display if lat and longitude is specified\n\tif (latitude && longitude) {\n\t\tlink.google = 'https://www.google.com/maps/@?api=1&map_action=map&';\n\n\t\t// If navigate is navigate with lat and lng params\n\t\tif (navigate === true) {\n\t\t\tconsole.warn(\"Expected 'end' parameter in navigation, defaulting to preview mode.\");\n\t\t\toptions.navigate = false;\n\t\t}\n\t}\n\n\t// Directions if start and end is present\n\tif (options.end) {\n\t\tlink.google = 'https://www.google.com/maps/dir/?api=1&';\n\t}\n\n\tconst mapQueryParams = createQueryParameters({...options, provider});\n\t// Escaped commas cause unusual error with Google map\n    return link[provider] + queryString.stringify(mapQueryParams).replace(/%2C/g, ',');\n}\n"]},"metadata":{},"sourceType":"module"}