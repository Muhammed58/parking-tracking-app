{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"rootStyle\", \"textInputStyle\", \"onBlur\", \"onFocus\", \"value\", \"renderCell\", \"cellCount\", \"RootProps\", \"RootComponent\", \"InputComponent\"];\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { forwardRef } from 'react';\nimport { getStyle, getSymbols } from \"./utils\";\nimport { useFocusState } from \"./useFocusState\";\nimport { styles } from \"./CodeField.styles\";\nvar DEFAULT_CELL_COUNT = 4;\n\nfunction CodeFieldComponent(_ref, ref) {\n  var rootStyle = _ref.rootStyle,\n      textInputStyle = _ref.textInputStyle,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      value = _ref.value,\n      renderCell = _ref.renderCell,\n      _ref$cellCount = _ref.cellCount,\n      cellCount = _ref$cellCount === void 0 ? DEFAULT_CELL_COUNT : _ref$cellCount,\n      _ref$RootProps = _ref.RootProps,\n      RootProps = _ref$RootProps === void 0 ? {} : _ref$RootProps,\n      _ref$RootComponent = _ref.RootComponent,\n      RootComponent = _ref$RootComponent === void 0 ? View : _ref$RootComponent,\n      _ref$InputComponent = _ref.InputComponent,\n      InputComponent = _ref$InputComponent === void 0 ? TextInput : _ref$InputComponent,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var focusState = useFocusState(onBlur, onFocus);\n  var cells = getSymbols(value || '', cellCount).map(function (symbol, index, symbols) {\n    var isFirstEmptySymbol = symbols.indexOf('') === index;\n    return renderCell({\n      index: index,\n      symbol: symbol,\n      isFocused: focusState.isFocused && isFirstEmptySymbol\n    });\n  });\n  return React.createElement(RootComponent, _extends({}, RootProps, {\n    style: getStyle(styles.root, rootStyle)\n  }), cells, React.createElement(InputComponent, _extends({\n    disableFullscreenUI: true,\n    caretHidden: true,\n    spellCheck: false,\n    autoCorrect: false,\n    blurOnSubmit: false,\n    clearButtonMode: \"never\",\n    autoCapitalize: \"characters\",\n    underlineColorAndroid: \"transparent\",\n    maxLength: cellCount\n  }, rest, {\n    value: value,\n    onBlur: focusState.onBlur,\n    onFocus: focusState.onFocus,\n    style: getStyle(styles.textInput, textInputStyle),\n    ref: ref\n  })));\n}\n\nexport var CodeField = forwardRef(CodeFieldComponent);","map":{"version":3,"sources":["/Users/muhammetarslantas/Desktop/Muhammet/Projects/ParkingApp/client/node_modules/react-native-confirmation-code-field/esm/CodeField.js"],"names":["React","forwardRef","getStyle","getSymbols","useFocusState","styles","DEFAULT_CELL_COUNT","CodeFieldComponent","ref","rootStyle","textInputStyle","onBlur","onFocus","value","renderCell","cellCount","RootProps","RootComponent","View","InputComponent","TextInput","rest","focusState","cells","map","symbol","index","symbols","isFirstEmptySymbol","indexOf","isFocused","root","textInput","CodeField"],"mappings":";;;;;AACA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,SAAQC,QAAR,EAAkBC,UAAlB;AACA,SAAQC,aAAR;AACA,SAAQC,MAAR;AACA,IAAMC,kBAAkB,GAAG,CAA3B;;AACA,SAASC,kBAAT,OAcEC,GAdF,EAeE;AAAA,MAbEC,SAaF,QAbEA,SAaF;AAAA,MAZEC,cAYF,QAZEA,cAYF;AAAA,MAXEC,MAWF,QAXEA,MAWF;AAAA,MAVEC,OAUF,QAVEA,OAUF;AAAA,MATEC,KASF,QATEA,KASF;AAAA,MAREC,UAQF,QAREA,UAQF;AAAA,4BAPEC,SAOF;AAAA,MAPEA,SAOF,+BAPcT,kBAOd;AAAA,4BANEU,SAMF;AAAA,MANEA,SAMF,+BANc,EAMd;AAAA,gCALEC,aAKF;AAAA,MALEA,aAKF,mCALkBC,IAKlB;AAAA,iCAJEC,cAIF;AAAA,MAJEA,cAIF,oCAJmBC,SAInB;AAAA,MAHKC,IAGL;;AACA,MAAMC,UAAU,GAAGlB,aAAa,CAACO,MAAD,EAASC,OAAT,CAAhC;AACA,MAAMW,KAAK,GAAGpB,UAAU,CAACU,KAAK,IAAI,EAAV,EAAcE,SAAd,CAAV,CAAmCS,GAAnC,CACZ,UAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,EAA4B;AAC1B,QAAMC,kBAAkB,GAAGD,OAAO,CAACE,OAAR,CAAgB,EAAhB,MAAwBH,KAAnD;AACA,WAAOZ,UAAU,CAAC;AAChBY,MAAAA,KAAK,EAALA,KADgB;AAEhBD,MAAAA,MAAM,EAANA,MAFgB;AAGhBK,MAAAA,SAAS,EAAER,UAAU,CAACQ,SAAX,IAAwBF;AAHnB,KAAD,CAAjB;AAKD,GARW,CAAd;AAUA,SACE,oBAAC,aAAD,eAAmBZ,SAAnB;AAA8B,IAAA,KAAK,EAAEd,QAAQ,CAACG,MAAM,CAAC0B,IAAR,EAActB,SAAd;AAA7C,MACGc,KADH,EAEE,oBAAC,cAAD;AACE,IAAA,mBAAmB,MADrB;AAIE,IAAA,WAAW,EAAE,IAJf;AAKE,IAAA,UAAU,EAAE,KALd;AAME,IAAA,WAAW,EAAE,KANf;AAOE,IAAA,YAAY,EAAE,KAPhB;AAQE,IAAA,eAAe,EAAC,OARlB;AASE,IAAA,cAAc,EAAC,YATjB;AAUE,IAAA,qBAAqB,EAAC,aAVxB;AAWE,IAAA,SAAS,EAAER;AAXb,KAYMM,IAZN;AAaE,IAAA,KAAK,EAAER,KAbT;AAcE,IAAA,MAAM,EAAES,UAAU,CAACX,MAdrB;AAeE,IAAA,OAAO,EAAEW,UAAU,CAACV,OAftB;AAgBE,IAAA,KAAK,EAAEV,QAAQ,CAACG,MAAM,CAAC2B,SAAR,EAAmBtB,cAAnB,CAhBjB;AAiBE,IAAA,GAAG,EAAEF;AAjBP,KAFF,CADF;AAwBD;;AACD,OAAO,IAAMyB,SAAS,GAAGhC,UAAU,CAACM,kBAAD,CAA5B","sourcesContent":["import {TextInput, View} from 'react-native';\nimport React, {forwardRef} from 'react';\nimport {getStyle, getSymbols} from './utils';\nimport {useFocusState} from './useFocusState';\nimport {styles} from './CodeField.styles';\nconst DEFAULT_CELL_COUNT = 4;\nfunction CodeFieldComponent(\n  {\n    rootStyle,\n    textInputStyle,\n    onBlur,\n    onFocus,\n    value,\n    renderCell,\n    cellCount = DEFAULT_CELL_COUNT,\n    RootProps = {},\n    RootComponent = View,\n    InputComponent = TextInput,\n    ...rest\n  },\n  ref,\n) {\n  const focusState = useFocusState(onBlur, onFocus);\n  const cells = getSymbols(value || '', cellCount).map(\n    (symbol, index, symbols) => {\n      const isFirstEmptySymbol = symbols.indexOf('') === index;\n      return renderCell({\n        index,\n        symbol,\n        isFocused: focusState.isFocused && isFirstEmptySymbol,\n      });\n    },\n  );\n  return (\n    <RootComponent {...RootProps} style={getStyle(styles.root, rootStyle)}>\n      {cells}\n      <InputComponent\n        disableFullscreenUI\n        // Use `caretHidden={false}` when `value={''}` and user can't paste\\copy text because menu doesn't appear\n        // See more: https://github.com/retyui/react-native-confirmation-code-field/issues/140\n        caretHidden={true}\n        spellCheck={false}\n        autoCorrect={false}\n        blurOnSubmit={false}\n        clearButtonMode=\"never\"\n        autoCapitalize=\"characters\"\n        underlineColorAndroid=\"transparent\"\n        maxLength={cellCount}\n        {...rest}\n        value={value}\n        onBlur={focusState.onBlur}\n        onFocus={focusState.onFocus}\n        style={getStyle(styles.textInput, textInputStyle)}\n        ref={ref}\n      />\n    </RootComponent>\n  );\n}\nexport const CodeField = forwardRef(CodeFieldComponent);\n"]},"metadata":{},"sourceType":"module"}