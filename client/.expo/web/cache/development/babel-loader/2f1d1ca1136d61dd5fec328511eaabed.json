{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport 'react-native-gesture-handler';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as SecureStore from 'expo-secure-store';\nimport Home from \"./screens/Home.js\";\nimport MainPage from \"./screens/MainPage.js\";\nimport ParkHere from \"./screens/ParkHere.js\";\nimport CurrentParking from \"./screens/CurrentParking.js\";\nimport ParkingHistory from \"./screens/ParkingHistory.js\";\nimport ProfilePage from \"./screens/ProfilePage.js\";\nimport { LOGIN_KEY, USER_NAME, USER_PASSWORD } from '@env';\nimport { useFonts } from 'expo-font';\nimport { postSignIn } from \"./api.js\";\nimport { AuthContext } from \"./screens/subScreens/forgotPassword.js\";\nimport SplashScreen from \"./screens/subScreens/SplashScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useFonts = useFonts({\n    Rakkas: require(\"./assets/fonts/Rakkas-Regular.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      loaded = _useFonts2[0];\n\n  var _React$useReducer = React.useReducer(function (prevState, action) {\n    switch (action.type) {\n      case 'RESTORE_TOKEN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case 'SIGN_IN':\n        if (action.token) {\n          SecureStore.setItemAsync(LOGIN_KEY, action.token);\n        }\n\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: false,\n          userToken: action.token\n        });\n\n      case 'SIGN_OUT':\n        SecureStore.deleteItemAsync(LOGIN_KEY);\n        SecureStore.deleteItemAsync(USER_NAME);\n        SecureStore.deleteItemAsync(USER_PASSWORD);\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: true,\n          userToken: null\n        });\n    }\n  }, {\n    isLoading: true,\n    isSignout: false,\n    userToken: null\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      mounted = _React$useState2[0],\n      setMounted = _React$useState2[1];\n\n  React.useEffect(function () {\n    var bootstrapAsync = function bootstrapAsync() {\n      var userToken, email, loginPassword;\n      return _regeneratorRuntime.async(function bootstrapAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(SecureStore.getItemAsync(LOGIN_KEY));\n\n            case 3:\n              userToken = _context.sent;\n\n              if (!(userToken !== null)) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(SecureStore.getItemAsync(USER_NAME));\n\n            case 7:\n              email = _context.sent;\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(SecureStore.getItemAsync(USER_PASSWORD));\n\n            case 10:\n              loginPassword = _context.sent;\n              authContext.signIn({\n                email: email,\n                loginPassword: loginPassword\n              }).then(function (res) {\n                if (res.response.status == 401) {\n                  authContext.signOut();\n                }\n\n                console.log(res);\n              }).catch(function (err) {\n                console.log(err);\n              });\n\n            case 12:\n              console.log(\"userTokennn \", userToken);\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(\"boostrapError\", _context.t0);\n\n            case 18:\n              dispatch({\n                type: 'RESTORE_TOKEN',\n                token: userToken\n              });\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 15]], Promise);\n    };\n\n    if (mounted) {\n      bootstrapAsync();\n    }\n\n    return function () {\n      setMounted(false);\n    };\n  }, []);\n  var authContext = React.useMemo(function () {\n    return {\n      signIn: function signIn(data) {\n        return _regeneratorRuntime.async(function signIn$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _regeneratorRuntime.awrap(postSignIn(data.email, data.loginPassword).then(function _callee(res) {\n                  return _regeneratorRuntime.async(function _callee$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          token = res.data.token;\n                          _context2.next = 3;\n                          return _regeneratorRuntime.awrap(SecureStore.setItemAsync(LOGIN_KEY, token));\n\n                        case 3:\n                          _context2.next = 5;\n                          return _regeneratorRuntime.awrap(SecureStore.setItemAsync(USER_NAME, data.email));\n\n                        case 5:\n                          _context2.next = 7;\n                          return _regeneratorRuntime.awrap(SecureStore.setItemAsync(USER_PASSWORD, data.loginPassword));\n\n                        case 7:\n                          dispatch({\n                            type: 'SIGN_IN',\n                            token: token\n                          });\n\n                        case 8:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                }).catch(function (err) {\n                  console.log(\"sign in error\", err);\n                  return err;\n                }));\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      signOut: function signOut() {\n        return dispatch({\n          type: 'SIGN_OUT'\n        });\n      },\n      signUp: function signUp(data) {\n        return _regeneratorRuntime.async(function signUp$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                dispatch({\n                  type: 'SIGN_IN',\n                  token: 'dummy-auth-token'\n                });\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    };\n  }, []);\n\n  if (state.isLoading) {\n    return _jsx(SplashScreen, {});\n  } else if (!loaded) {\n    return _jsx(SplashScreen, {});\n  }\n\n  return _jsx(NavigationContainer, {\n    children: _jsx(AuthContext.Provider, {\n      value: {\n        authContext: authContext,\n        state: state\n      },\n      children: _jsx(Stack.Navigator, {\n        screenOptions: {\n          headerShown: false,\n          gestureEnabled: false\n        },\n        children: state.userToken == null ? _jsx(Stack.Screen, {\n          name: \"Home\",\n          component: Home\n        }) : _jsxs(_Fragment, {\n          children: [_jsx(Stack.Screen, {\n            name: \"MainPage\",\n            component: MainPage\n          }), _jsx(Stack.Screen, {\n            name: \"ParkHere\",\n            component: ParkHere\n          }), _jsx(Stack.Screen, {\n            name: \"CurrentParking\",\n            component: CurrentParking\n          }), _jsx(Stack.Screen, {\n            name: \"ParkingHistory\",\n            component: ParkingHistory\n          }), _jsx(Stack.Screen, {\n            name: \"ProfilePage\",\n            component: ProfilePage\n          })]\n        })\n      })\n    })\n  });\n}","map":{"version":3,"sources":["/Users/muhammetarslantas/Desktop/Muhammet/Projects/ParkingApp/client/App.js"],"names":["React","NavigationContainer","createNativeStackNavigator","SecureStore","Home","MainPage","ParkHere","CurrentParking","ParkingHistory","ProfilePage","LOGIN_KEY","USER_NAME","USER_PASSWORD","useFonts","postSignIn","AuthContext","SplashScreen","Stack","App","navigation","Rakkas","require","loaded","useReducer","prevState","action","type","userToken","token","isLoading","setItemAsync","isSignout","deleteItemAsync","state","dispatch","useState","mounted","setMounted","useEffect","bootstrapAsync","getItemAsync","email","loginPassword","authContext","signIn","then","res","response","status","signOut","console","log","catch","err","useMemo","data","signUp","headerShown","gestureEnabled"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'react-native-gesture-handler';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as SecureStore from 'expo-secure-store';\nimport Home from './screens/Home.js'\nimport MainPage from './screens/MainPage.js'\nimport ParkHere from './screens/ParkHere.js'\nimport CurrentParking from './screens/CurrentParking.js'\nimport ParkingHistory from './screens/ParkingHistory.js';\nimport ProfilePage from './screens/ProfilePage.js';\nimport { LOGIN_KEY, USER_NAME, USER_PASSWORD  } from '@env'\nimport { useFonts } from 'expo-font'\nimport { postSignIn } from './api.js'\nimport { AuthContext } from './screens/subScreens/forgotPassword.js';\nimport SplashScreen from './screens/subScreens/SplashScreen'\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App({ navigation }) {\n  //Fonts define\n  let [loaded] = useFonts({\n    Rakkas: require('./assets/fonts/Rakkas-Regular.ttf')\n  })\n \n\n  const [state, dispatch] = React.useReducer(\n    (prevState, action) => {\n      switch (action.type) {\n        case 'RESTORE_TOKEN':\n          return {\n            ...prevState,\n            userToken: action.token,\n            isLoading: false,\n          };\n        case 'SIGN_IN':\n          if(action.token){\n            SecureStore.setItemAsync(LOGIN_KEY,action.token)\n          }\n          return {\n            ...prevState,\n            isSignout: false,\n            userToken: action.token,\n          };\n        case 'SIGN_OUT':\n          SecureStore.deleteItemAsync(LOGIN_KEY)\n          SecureStore.deleteItemAsync(USER_NAME)\n          SecureStore.deleteItemAsync(USER_PASSWORD)\n          return {\n            ...prevState,\n            isSignout: true,\n            userToken: null,\n          };\n      }\n    },\n    {\n      isLoading: true,\n      isSignout: false,\n      userToken: null,\n    }\n  );\n\n  const [mounted, setMounted] = React.useState(true);\n  React.useEffect(() => {\n    // Fetch the token from storage then navigate to our appropriate place\n    const bootstrapAsync = async () => {\n      let userToken;\n      try {\n        userToken = await SecureStore.getItemAsync(LOGIN_KEY);\n        // IF USER ALREADY LOGGED IN CREATE NEW TOKEN TO KEEP USER LOGGED IN\n        if(userToken!==null){\n          let email = await SecureStore.getItemAsync(USER_NAME)\n          let loginPassword = await SecureStore.getItemAsync(USER_PASSWORD)\n          authContext.signIn({email,loginPassword})\n                      .then(res=> {\n                           if(res.response.status ==401){\n                              authContext.signOut()\n                              }\n                            console.log(res)\n                      })\n                      .catch(err=>{ console.log(err)})\n        }\n        console.log(\"userTokennn \", userToken )\n      } catch (e) {\n        // Restoring token failed\n        console.log(\"boostrapError\", e)\n      }\n      // After restoring token, we may need to validate it in production apps\n      // This will switch to the App screen or Auth screen and this loading\n      // screen will be unmounted and thrown away.\n      dispatch({ type: 'RESTORE_TOKEN', token: userToken });\n    };\n    if (mounted) {\n      bootstrapAsync();\n    }\n  \n    return () => {\n      setMounted(false);\n    };\n  }, []);\n\n \n  const authContext = React.useMemo(\n    () => ({\n      signIn: async (data) => {\n        // In a production app, we need to send some data (usually username, password) to server and get a token\n        // We will also need to handle errors if sign in failed\n        // After getting token, we need to persist the token using `SecureStore`\n        // In the example, we'll use a dummy token\n         //SEND LOGIN INFO TO SERVER\n       return await postSignIn(data.email, data.loginPassword)\n        .then(async(res)=>{\n            token = res.data.token\n            await SecureStore.setItemAsync(LOGIN_KEY, token);\n            await SecureStore.setItemAsync(USER_NAME, data.email )\n            await SecureStore.setItemAsync(USER_PASSWORD, data.loginPassword )\n            dispatch({ type: 'SIGN_IN', token: token });\n        })\n        .catch((err)=>{ console.log(\"sign in error\", err); return err})\n      },\n    \n      signOut: () => dispatch({ type: 'SIGN_OUT' }),\n      signUp: async (data) => {\n        // In a production app, we need to send user data to server and get a token\n        // We will also need to handle errors if sign up failed\n        // After getting token, we need to persist the token using `SecureStore`\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n    }),\n    []\n  \n  );\n  if (state.isLoading) {\n    // We haven't finished checking for the token yet\n    return <SplashScreen />;\n  } else if (!loaded){\n    \n    return <SplashScreen />;\n  }\n  \n  return (\n   <NavigationContainer>\n      <AuthContext.Provider value={{authContext, state}}>\n\n      <Stack.Navigator screenOptions={ {headerShown: false, gestureEnabled: false} }>\n          {state.userToken == null? (\n              <Stack.Screen name=\"Home\" component={Home} />\n              ) : (\n              <>\n                <Stack.Screen name=\"MainPage\" component={MainPage} />\n                <Stack.Screen name=\"ParkHere\" component={ParkHere} />\n                <Stack.Screen name=\"CurrentParking\" component={CurrentParking} />\n                <Stack.Screen name=\"ParkingHistory\" component={ParkingHistory} />\n                <Stack.Screen name=\"ProfilePage\" component={ProfilePage} />\n              </>\n          )}\n      </Stack.Navigator>\n      </AuthContext.Provider>\n    </NavigationContainer>\n  );\n  \n}\n"]},"metadata":{},"sourceType":"module"}