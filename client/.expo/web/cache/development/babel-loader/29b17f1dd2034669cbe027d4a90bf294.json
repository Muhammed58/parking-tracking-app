{"ast":null,"code":"export var NetInfoStateType;\n\n(function (NetInfoStateType) {\n  NetInfoStateType[\"unknown\"] = \"unknown\";\n  NetInfoStateType[\"none\"] = \"none\";\n  NetInfoStateType[\"cellular\"] = \"cellular\";\n  NetInfoStateType[\"wifi\"] = \"wifi\";\n  NetInfoStateType[\"bluetooth\"] = \"bluetooth\";\n  NetInfoStateType[\"ethernet\"] = \"ethernet\";\n  NetInfoStateType[\"wimax\"] = \"wimax\";\n  NetInfoStateType[\"vpn\"] = \"vpn\";\n  NetInfoStateType[\"other\"] = \"other\";\n})(NetInfoStateType || (NetInfoStateType = {}));\n\nexport var NetInfoCellularGeneration;\n\n(function (NetInfoCellularGeneration) {\n  NetInfoCellularGeneration[\"2g\"] = \"2g\";\n  NetInfoCellularGeneration[\"3g\"] = \"3g\";\n  NetInfoCellularGeneration[\"4g\"] = \"4g\";\n  NetInfoCellularGeneration[\"5g\"] = \"5g\";\n})(NetInfoCellularGeneration || (NetInfoCellularGeneration = {}));","map":{"version":3,"sources":["types.ts"],"names":["NetInfoStateType","NetInfoCellularGeneration"],"mappings":"AASA,OAAA,IAAA,gBAAA;;WAAYA,gB;AAAAA,EAAAA,gB,WAAAA,G,SAAAA;AAAAA,EAAAA,gB,QAAAA,G,MAAAA;AAAAA,EAAAA,gB,YAAAA,G,UAAAA;AAAAA,EAAAA,gB,QAAAA,G,MAAAA;AAAAA,EAAAA,gB,aAAAA,G,WAAAA;AAAAA,EAAAA,gB,YAAAA,G,UAAAA;AAAAA,EAAAA,gB,SAAAA,G,OAAAA;AAAAA,EAAAA,gB,OAAAA,G,KAAAA;AAAAA,EAAAA,gB,SAAAA,G,OAAAA;GAAAA,gB,KAAAA,gB;;AAYZ,OAAA,IAAA,yBAAA;;WAAYC,yB;AAAAA,EAAAA,yB,MAAAA,G,IAAAA;AAAAA,EAAAA,yB,MAAAA,G,IAAAA;AAAAA,EAAAA,yB,MAAAA,G,IAAAA;AAAAA,EAAAA,yB,MAAAA,G,IAAAA;GAAAA,yB,KAAAA,yB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nexport enum NetInfoStateType {\n  unknown = 'unknown',\n  none = 'none',\n  cellular = 'cellular',\n  wifi = 'wifi',\n  bluetooth = 'bluetooth',\n  ethernet = 'ethernet',\n  wimax = 'wimax',\n  vpn = 'vpn',\n  other = 'other',\n}\n\nexport enum NetInfoCellularGeneration {\n  '2g' = '2g',\n  '3g' = '3g',\n  '4g' = '4g',\n  '5g' = '5g',\n}\n\nexport interface NetInfoConnectedDetails {\n  isConnectionExpensive: boolean;\n}\n\ninterface NetInfoConnectedState<\n  T extends NetInfoStateType,\n  D extends Record<string, unknown> = Record<string, unknown>\n> {\n  type: T;\n  isConnected: true;\n  isInternetReachable: boolean | null;\n  details: D & NetInfoConnectedDetails;\n  isWifiEnabled?: boolean;\n}\n\ninterface NetInfoDisconnectedState<T extends NetInfoStateType> {\n  type: T;\n  isConnected: false;\n  isInternetReachable: false;\n  details: null;\n}\n\nexport interface NetInfoUnknownState {\n  type: NetInfoStateType.unknown;\n  isConnected: boolean | null;\n  isInternetReachable: null;\n  details: null;\n}\n\nexport type NetInfoNoConnectionState = NetInfoDisconnectedState<\n  NetInfoStateType.none\n>;\nexport type NetInfoDisconnectedStates =\n  | NetInfoUnknownState\n  | NetInfoNoConnectionState;\n\nexport type NetInfoCellularState = NetInfoConnectedState<\n  NetInfoStateType.cellular,\n  {\n    cellularGeneration: NetInfoCellularGeneration | null;\n    carrier: string | null;\n  }\n>;\nexport type NetInfoWifiState = NetInfoConnectedState<\n  NetInfoStateType.wifi,\n  {\n    ssid: string | null;\n    bssid: string | null;\n    strength: number | null;\n    ipAddress: string | null;\n    subnet: string | null;\n    frequency: number | null;\n  }\n>;\nexport type NetInfoBluetoothState = NetInfoConnectedState<\n  NetInfoStateType.bluetooth\n>;\nexport type NetInfoEthernetState = NetInfoConnectedState<\n  NetInfoStateType.ethernet,\n  {\n    ipAddress: string | null;\n    subnet: string | null;\n  }\n>;\nexport type NetInfoWimaxState = NetInfoConnectedState<NetInfoStateType.wimax>;\nexport type NetInfoVpnState = NetInfoConnectedState<NetInfoStateType.vpn>;\nexport type NetInfoOtherState = NetInfoConnectedState<NetInfoStateType.other>;\nexport type NetInfoConnectedStates =\n  | NetInfoCellularState\n  | NetInfoWifiState\n  | NetInfoBluetoothState\n  | NetInfoEthernetState\n  | NetInfoWimaxState\n  | NetInfoVpnState\n  | NetInfoOtherState;\n\nexport type NetInfoState = NetInfoDisconnectedStates | NetInfoConnectedStates;\n\nexport type NetInfoChangeHandler = (state: NetInfoState) => void;\nexport type NetInfoSubscription = () => void;\n\nexport interface NetInfoConfiguration {\n  reachabilityUrl: string;\n  reachabilityTest: (response: Response) => Promise<boolean>;\n  reachabilityLongTimeout: number;\n  reachabilityShortTimeout: number;\n  reachabilityRequestTimeout: number;\n  reachabilityShouldRun: () => boolean;\n}\n"]},"metadata":{},"sourceType":"module"}