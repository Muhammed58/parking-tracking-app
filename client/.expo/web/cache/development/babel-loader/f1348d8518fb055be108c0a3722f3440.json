{"ast":null,"code":"var truncateString = function truncateString(codeValue, codeLength) {\n  return codeValue.substr(0, codeLength).split('');\n};\n\nvar emptySymbols = function emptySymbols(codeLength) {\n  return new Array(codeLength).fill('');\n};\n\nexport var getSymbols = function getSymbols(codeValue, codeLength) {\n  return new Array().concat(truncateString(codeValue, codeLength)).concat(emptySymbols(codeLength)).slice(0, codeLength);\n};\nexport var getStyle = function getStyle(base, custom) {\n  return custom ? [base, custom] : base;\n};\nexport var isLastFilledCell = function isLastFilledCell(_ref) {\n  var value = _ref.value,\n      index = _ref.index;\n  return Boolean(value && value.length - 2 === index);\n};","map":{"version":3,"sources":["/Users/muhammetarslantas/Desktop/Muhammet/Projects/ParkingApp/client/node_modules/react-native-confirmation-code-field/esm/utils.js"],"names":["truncateString","codeValue","codeLength","substr","split","emptySymbols","Array","fill","getSymbols","concat","slice","getStyle","base","custom","isLastFilledCell","value","index","Boolean","length"],"mappings":"AAAA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,SAAD,EAAYC,UAAZ;AAAA,SACrBD,SAAS,CAACE,MAAV,CAAiB,CAAjB,EAAoBD,UAApB,EAAgCE,KAAhC,CAAsC,EAAtC,CADqB;AAAA,CAAvB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACH,UAAD;AAAA,SAAgB,IAAII,KAAJ,CAAUJ,UAAV,EAAsBK,IAAtB,CAA2B,EAA3B,CAAhB;AAAA,CAArB;;AACA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACP,SAAD,EAAYC,UAAZ;AAAA,SACxB,IAAII,KAAJ,GACGG,MADH,CACUT,cAAc,CAACC,SAAD,EAAYC,UAAZ,CADxB,EAEGO,MAFH,CAEUJ,YAAY,CAACH,UAAD,CAFtB,EAGGQ,KAHH,CAGS,CAHT,EAGYR,UAHZ,CADwB;AAAA,CAAnB;AAKP,OAAO,IAAMS,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAOC,MAAP;AAAA,SAAmBA,MAAM,GAAG,CAACD,IAAD,EAAOC,MAAP,CAAH,GAAoBD,IAA7C;AAAA,CAAjB;AACP,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAAEC,KAAF,QAAEA,KAAF;AAAA,MAASC,KAAT,QAASA,KAAT;AAAA,SAC9BC,OAAO,CAACF,KAAK,IAAIA,KAAK,CAACG,MAAN,GAAe,CAAf,KAAqBF,KAA/B,CADuB;AAAA,CAAzB","sourcesContent":["const truncateString = (codeValue, codeLength) =>\n  codeValue.substr(0, codeLength).split('');\nconst emptySymbols = (codeLength) => new Array(codeLength).fill('');\nexport const getSymbols = (codeValue, codeLength) =>\n  new Array()\n    .concat(truncateString(codeValue, codeLength))\n    .concat(emptySymbols(codeLength))\n    .slice(0, codeLength);\nexport const getStyle = (base, custom) => (custom ? [base, custom] : base);\nexport const isLastFilledCell = ({value, index}) =>\n  Boolean(value && value.length - 2 === index);\n"]},"metadata":{},"sourceType":"module"}