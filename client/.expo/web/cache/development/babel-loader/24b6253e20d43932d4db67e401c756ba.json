{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport 'react-native-gesture-handler';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as SecureStore from 'expo-secure-store';\nimport Home from \"./screens/Home.js\";\nimport MainPage from \"./screens/MainPage.js\";\nimport ParkHere from \"./screens/ParkHere.js\";\nimport CurrentParking from \"./screens/CurrentParking.js\";\nimport ParkingHistory from \"./screens/ParkingHistory.js\";\nimport ProfilePage from \"./screens/ProfilePage.js\";\nimport { LOGIN_KEY } from '@env';\nimport { useFonts } from 'expo-font';\nimport { postSignIn } from \"./api.js\";\nimport { AuthContext } from \"./screens/subScreens/forgotPassword.js\";\nimport SplashScreen from \"./screens/subScreens/SplashScreen\";\nvar Stack = createNativeStackNavigator();\nexport default function App(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useFonts = useFonts({\n    Rakkas: require(\"./assets/fonts/Rakkas-Regular.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      loaded = _useFonts2[0];\n\n  var _React$useReducer = React.useReducer(function (prevState, action) {\n    switch (action.type) {\n      case 'RESTORE_TOKEN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case 'SIGN_IN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: false,\n          userToken: action.token\n        });\n\n      case 'SIGN_OUT':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: true,\n          userToken: null\n        });\n    }\n  }, {\n    isLoading: true,\n    isSignout: false,\n    userToken: null\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  React.useEffect(function () {\n    var bootstrapAsync = function bootstrapAsync() {\n      var userToken;\n      return _regeneratorRuntime.async(function bootstrapAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(SecureStore.getItemAsync(LOGIN_KEY));\n\n            case 3:\n              userToken = _context.sent;\n              console.log(\"userToken\", userToken);\n              _context.next = 9;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 9:\n              dispatch({\n                type: 'RESTORE_TOKEN',\n                token: \"dummy-auth-token\"\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    };\n\n    bootstrapAsync();\n  }, []);\n  var authContext = React.useMemo(function () {\n    return {\n      signIn: function signIn(data) {\n        return _regeneratorRuntime.async(function signIn$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(data);\n                postSignIn(data.enterEmail, data.loginPassword).then(function (res) {\n                  token = res.data.token;\n                  SecureStore.setItemAsync(LOGIN_KEY, token);\n                }).catch(function (err) {\n                  console.log(err);\n                  setInvalidErr(true);\n                });\n                _context2.next = 4;\n                return _regeneratorRuntime.awrap(SecureStore.getItemAsync(LOGIN_KEY));\n\n              case 4:\n                userToken = _context2.sent;\n                dispatch({\n                  type: 'SIGN_IN',\n                  token: userToken\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      signOut: function signOut() {\n        return dispatch({\n          type: 'SIGN_OUT'\n        });\n      },\n      signUp: function signUp(data) {\n        return _regeneratorRuntime.async(function signUp$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                dispatch({\n                  type: 'SIGN_IN',\n                  token: 'dummy-auth-token'\n                });\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    };\n  }, []);\n  console.log(\"this userToken\", state.userToken);\n\n  if (state.isLoading || !loaded) {\n    return React.createElement(SplashScreen, null);\n  }\n\n  return React.createElement(NavigationContainer, null, React.createElement(AuthContext.Provider, {\n    value: authContext\n  }, React.createElement(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false,\n      gestureEnabled: false\n    }\n  }, state.userToken == null || \"dummy-auth-token\" ? React.createElement(Stack.Screen, {\n    name: \"Home\",\n    component: Home\n  }) : React.createElement(React.Fragment, null, React.createElement(Stack.Screen, {\n    name: \"MainPage\",\n    component: MainPage\n  }), React.createElement(Stack.Screen, {\n    name: \"ParkHere\",\n    component: ParkHere\n  }), React.createElement(Stack.Screen, {\n    name: \"CurrentParking\",\n    component: CurrentParking\n  }), React.createElement(Stack.Screen, {\n    name: \"ParkingHistory\",\n    component: ParkingHistory\n  }), React.createElement(Stack.Screen, {\n    name: \"ProfilePage\",\n    component: ProfilePage\n  })))));\n}","map":{"version":3,"sources":["/Users/muhammetarslantas/Desktop/Muhammet/Projects/ParkingApp/client/App.js"],"names":["React","NavigationContainer","createNativeStackNavigator","SecureStore","Home","MainPage","ParkHere","CurrentParking","ParkingHistory","ProfilePage","LOGIN_KEY","useFonts","postSignIn","AuthContext","SplashScreen","Stack","App","navigation","Rakkas","require","loaded","useReducer","prevState","action","type","userToken","token","isLoading","isSignout","state","dispatch","useEffect","bootstrapAsync","getItemAsync","console","log","authContext","useMemo","signIn","data","enterEmail","loginPassword","then","res","setItemAsync","catch","err","setInvalidErr","signOut","signUp","headerShown","gestureEnabled"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'react-native-gesture-handler';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as SecureStore from 'expo-secure-store';\nimport Home from './screens/Home.js'\nimport MainPage from './screens/MainPage.js'\nimport ParkHere from './screens/ParkHere.js'\nimport CurrentParking from './screens/CurrentParking.js'\nimport ParkingHistory from './screens/ParkingHistory.js';\nimport ProfilePage from './screens/ProfilePage.js';\nimport { LOGIN_KEY } from '@env'\nimport { useFonts } from 'expo-font'\nimport { postSignIn } from './api.js'\nimport { AuthContext } from './screens/subScreens/forgotPassword.js';\nimport SplashScreen from './screens/subScreens/SplashScreen'\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App({ navigation }) {\n \n  //Fonts define\n  let [loaded] = useFonts({\n    Rakkas: require('./assets/fonts/Rakkas-Regular.ttf')\n  })\n\n  const [state, dispatch] = React.useReducer(\n    (prevState, action) => {\n      switch (action.type) {\n        case 'RESTORE_TOKEN':\n          return {\n            ...prevState,\n            userToken: action.token,\n            isLoading: false,\n          };\n        case 'SIGN_IN':\n          return {\n            ...prevState,\n            isSignout: false,\n            userToken: action.token,\n          };\n        case 'SIGN_OUT':\n          return {\n            ...prevState,\n            isSignout: true,\n            userToken: null,\n          };\n      }\n    },\n    {\n      isLoading: true,\n      isSignout: false,\n      userToken: null,\n    }\n  );\n\n  React.useEffect(() => {\n    // Fetch the token from storage then navigate to our appropriate place\n    const bootstrapAsync = async () => {\n      let userToken;\n\n      try {\n        userToken = await SecureStore.getItemAsync(LOGIN_KEY);\n        console.log(\"userToken\", userToken)\n      } catch (e) {\n        // Restoring token failed\n      }\n\n      // After restoring token, we may need to validate it in production apps\n\n      // This will switch to the App screen or Auth screen and this loading\n      // screen will be unmounted and thrown away.\n      dispatch({ type: 'RESTORE_TOKEN', token: \"dummy-auth-token\" });\n    };\n\n    bootstrapAsync();\n  }, []);\n\n  const authContext = React.useMemo(\n    () => ({\n      signIn: async (data) => {\n        console.log(data)\n        // In a production app, we need to send some data (usually username, password) to server and get a token\n        // We will also need to handle errors if sign in failed\n        // After getting token, we need to persist the token using `SecureStore`\n        // In the example, we'll use a dummy token\n         //SEND LOGIN INFO TO SERVER\n      postSignIn(data.enterEmail, data.loginPassword)\n        .then((res)=>{\n            token = res.data.token\n            SecureStore.setItemAsync(LOGIN_KEY, token);\n        })\n        .catch((err)=>{ console.log(err); setInvalidErr(true) })\n        userToken = await SecureStore.getItemAsync(LOGIN_KEY);\n        dispatch({ type: 'SIGN_IN', token: userToken });\n      },\n      signOut: () => dispatch({ type: 'SIGN_OUT' }),\n      signUp: async (data) => {\n        // In a production app, we need to send user data to server and get a token\n        // We will also need to handle errors if sign up failed\n        // After getting token, we need to persist the token using `SecureStore`\n        // In the example, we'll use a dummy token\n\n        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\n      },\n    }),\n    []\n  );\n    console.log(\"this userToken\", state.userToken)\n  if (state.isLoading || !loaded) {\n    // We haven't finished checking for the token yet\n    return <SplashScreen />;\n  }\n  \n  return (\n   <NavigationContainer>\n      <AuthContext.Provider value={authContext}>\n\n      <Stack.Navigator screenOptions={ {headerShown: false, gestureEnabled: false} }>\n          {state.userToken == null || \"dummy-auth-token\" ? (\n              <Stack.Screen name=\"Home\" component={Home} />\n              ) : (\n              <>\n                <Stack.Screen name=\"MainPage\" component={MainPage} />\n                <Stack.Screen name=\"ParkHere\" component={ParkHere} />\n                <Stack.Screen name=\"CurrentParking\" component={CurrentParking} />\n                <Stack.Screen name=\"ParkingHistory\" component={ParkingHistory} />\n                <Stack.Screen name=\"ProfilePage\" component={ProfilePage} />\n              </>\n          )}\n      </Stack.Navigator>\n      </AuthContext.Provider>\n    </NavigationContainer>\n  );\n  \n}\n"]},"metadata":{},"sourceType":"module"}